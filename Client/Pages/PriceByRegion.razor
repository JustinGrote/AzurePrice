@page "/"
@inject HttpClient Http
@using Blazorise.DataGrid


<h1>Azure Spot VM Price</h1>

<h3>Region</h3>

<SelectList Data="@regions"
    TextField="@((item)=>item)"
    ValueField="@((item)=>item)"
    SelectedValue="@currentRegion"
    SelectedValueChanged="@RegionSelectHandler" 
/>


<DataGrid 
    TItem=Price
    ShowPager=true
    PageSize=10
    Striped=true
    Filterable=true
    Data=@priceList
    >
    <DataGridColumn Caption="Name"
        TItem=Price
        Field=@nameof(Price.SkuName)
        Readonly=true
    />
    <DataGridColumn Caption="SKU"
        TItem=Price
        Field=@nameof(Price.ArmSkuName)
        Readonly=true
    />
    <DataGridNumericColumn Caption="Discount"
        TItem=Price
        Field=@nameof(Price.Discount)
        Readonly=true>
        <DisplayTemplate>
            @(
                context.Discount.ToString("P1")
            )
        </DisplayTemplate>
    </DataGridNumericColumn>
    <DataGridNumericColumn Caption="Price/hr"
        TItem=Price
        Field=@nameof(Price.UnitPrice)
        Readonly=true>
        <DisplayTemplate>
            @(
                context.UnitPriceDollars
            )
        </DisplayTemplate>
    </DataGridNumericColumn>
    <DataGridNumericColumn Caption="Price/day"
        TItem=Price
        Field=@nameof(Price.UnitPrice)
        Readonly=true>
        <DisplayTemplate>
            @(
                context.UnitPriceDailyDollars
            )
        </DisplayTemplate>
    </DataGridNumericColumn>
    <DataGridNumericColumn Caption="Price/wk"
        TItem=Price
        Field=@nameof(Price.UnitPrice)
        Readonly=true>
        <DisplayTemplate>
            @(
                context.UnitPriceWeeklyDollars
            )
        </DisplayTemplate>
    </DataGridNumericColumn>
    <DataGridNumericColumn Caption="Price/mo"
        TItem=Price
        Field=@nameof(Price.UnitPrice)
        Readonly=true>
        <DisplayTemplate>
            @(
                context.UnitPriceMonthlyDollars
            )
        </DisplayTemplate>
    </DataGridNumericColumn>
    <DataGridNumericColumn Caption="Retail"
        TItem=Price
        Field=@nameof(Price.RetailPrice)
        Readonly=true>
        <DisplayTemplate>
            @(
                context.RetailPrice.ToString("C6")
            )
        </DisplayTemplate>
    </DataGridNumericColumn>
    <DataGridDateColumn Caption="Last Changed"
        TItem=Price
        Field=@nameof(Price.EffectiveStartDate)
        Readonly=true
    />
</DataGrid>

@code {
    //SelectList Stuff
    //FIXME: Abstract list definition to function that fetches from IP Address API maybe?
    private PriceClient client;
    private List<string> regions = new List<string> { "australiacentral", "australiacentral2", "australiaeast", "australiasoutheast", "brazilsouth", "brazilsoutheast", "canadacentral", "canadaeast", "centralindia", "centralus", "eastasia", "eastus", "eastus2", "francecentral", "francesouth", "germanynorth", "germanywestcentral", "japaneast", "japanwest", "koreacentral", "koreasouth", "northcentralus", "northeurope", "norwayeast", "norwaywest", "southafricanorth", "southafricawest", "southcentralus", "southeastasia", "southindia", "switzerlandnorth", "switzerlandwest", "uaecentral", "uaenorth", "uksouth", "ukwest", "westcentralus", "westeurope", "westindia", "westus", "westus2" };
    private object currentRegion { get; set; } = "westus2";


    //DataGrid Stuff
    private List<Price> priceList;

    async Task<List<Price>> GetSpotPricesByRegion(string region) {
        
        //Prefetch 400 records
        var query = new ODataQuery<Price>($"armRegionName eq '{region}'");
        var spotPrices = await client.GetSpotPrices(query, 4);
        //BUGFIX: Reset the query
        //TODO: Find a better way to re-instantiate the item
        query = new ODataQuery<Price>($"armRegionName eq '{region}'");
        var retailPrices = await client.GetRetailPrices(query, 4);
        foreach (Price spotPriceItem in spotPrices) {
            try {
                spotPriceItem.RetailPrice = retailPrices.Single<Price>(priceItem => priceItem.ArmSkuName == spotPriceItem.ArmSkuName).RetailPrice;
            } catch (InvalidOperationException) {
                Console.WriteLine(spotPriceItem.ArmSkuName);
            }
        }
        return spotPrices.OrderByDescending(price=>price.Discount).ToList();
    }

    async Task RegionSelectHandler( object newValue )
    {
        currentRegion = newValue;
        priceList = await GetSpotPricesByRegion(currentRegion.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        //FIXME: Abstract this to a new function when I learn how
        client = new PriceClient(Http);
        priceList = await GetSpotPricesByRegion(currentRegion.ToString());
    }
}
