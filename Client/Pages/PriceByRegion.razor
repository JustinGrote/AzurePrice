@page "/pricebyregion"
@inject HttpClient Http
@using Blazorise.DataGrid
@using System.Collections.Generic

<h1>Azure Retail Price</h1>

<p>Prices for Azure Spot VMs in the US West 2 Region</p>

<h3>Region</h3>

<SelectList Data="@regions"
    TextField="@((item)=>item)"
    ValueField="@((item)=>item)"
    SelectedValue="@currentRegion"
    SelectedValueChanged="@RegionSelectHandler" />
<br />
<DataGrid 
    TItem="Price" 
    ShowPager=true
    PageSize=10
    Striped=true
    Filterable="true"
    Data="@priceList"
    >
    
    <DataGridColumn Caption="SKU"
        TItem="Price"
        Field="@nameof(Price.ArmSkuName)"
        Readonly="true"
    />
    <DataGridNumericColumn Caption="Price"
        TItem="Price" 
        Field="@nameof(Price.UnitPrice)"
        Readonly="true"
    />
    <DataGridDateColumn Caption="Last Changed"
        TItem="Price" 
        Field="@nameof(Price.EffectiveStartDate)"
        Readonly="true"
    />
</DataGrid>

@* 
@if (priceResponse == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Region</th>
                <th>SKU</th>
                <th>Price</th>
                <th>Last Updated</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var price in priceResponse.Prices)
            {
                <tr>
                    <td>@price.ArmRegionName</td>
                    <td>@price.ArmSkuName</td>
                    <td>@price.UnitPrice</td>
                    <td>@price.EffectiveStartDate</td>
                </tr>
            }
        </tbody>
    </table>


} *@

@code {
    //SelectList Stuff
    //FIXME: Abstract list definition to function that fetches from IP Address API maybe?
    private List<string> regions = new List<string> { "australiacentral", "australiacentral2", "australiaeast", "australiasoutheast", "brazilsouth", "brazilsoutheast", "canadacentral", "canadaeast", "centralindia", "centralus", "eastasia", "eastus", "eastus2", "francecentral", "francesouth", "germanynorth", "germanywestcentral", "japaneast", "japanwest", "koreacentral", "koreasouth", "northcentralus", "northeurope", "norwayeast", "norwaywest", "southafricanorth", "southafricawest", "southcentralus", "southeastasia", "southindia", "switzerlandnorth", "switzerlandwest", "uaecentral", "uaenorth", "uksouth", "ukwest", "westcentralus", "westeurope", "westindia", "westus", "westus2" };
    private object currentRegion { get; set; } = "westus2";

    //DataGrid Stuff
    private PriceResponse priceResponse;

    async Task RegionSelectHandler( object newValue )
    {
        currentRegion = newValue;
        priceResponse = await
            Http.GetFromJsonAsync<PriceResponse>($"/api/prices?$filter=contains(skuName%2c%27Spot%27)+and+armRegionName+eq+%27{currentRegion}%27");
        priceList = priceResponse.Prices.OrderBy(p=>p.UnitPrice).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        //FIXME: Abstract this to a new function when I learn how
        priceResponse = await
            Http.GetFromJsonAsync<PriceResponse>($"/api/prices?$filter=contains(skuName%2c%27Spot%27)+and+armRegionName+eq+%27{currentRegion}%27");
        priceList = priceResponse.Prices.OrderBy(p=>p.UnitPrice).ToList();
    }
    private List<Price> priceList; 

    @* TODO: Disabled, redo for realtime readdata filtering
    async Task OnReadData( DataGridReadDataEventArgs<Price> e )
    {
        // this can be call to anything, in this case we're calling a fictional api
        // var response = await Http.GetJsonAsync<Price[]>( $"some-api/Prices?page={e.Page}&pageSize={e.PageSize}" );

        priceResponse = await
            Http.GetFromJsonAsync<PriceResponse>($"/api/prices?$filter=contains(skuName%2c%27Spot%27)+and+armRegionName+eq+%27westus2%27&$skip={e.Page}&$top={e.PageSize}");

        priceList = priceResponse.Prices; // an actual data for the current page
        totalPriceItems = priceResponse.Count == pageSize ? 1000 : priceResponse.Count; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();
    } *@
}
